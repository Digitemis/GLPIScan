from inc import Config

from packaging.version import Version, parse
import requests, chalk

class Exploits:

    def verifVersion(self, version, CVE):
        for v in CVE:
            if v[0] == "<" and parse(version) >= parse(v[1]):
                return False
            if v[0] == "<=" and parse(version) > parse(v[1]):
                return False
            if v[0] == ">" and parse(version) <= parse(v[1]):
                return False
            if v[0] == ">=" and parse(version) < parse(v[1]):
                return False
            if v[0] == "=" and parse(version) is not parse(v[1]):
                return False
        return True

    def getCVE(self, CVE):
        print(chalk.red('\n\t[+] Vulnerable to: ' + CVE[2], bold=True))
        print("\t[+] Reference: " + CVE[3])
        if CVE[4]:
            print("\t[+] CVE: " + CVE[4])

    def CVE_2022_35914(self):
        if Config.DEBUG:
            print("[DEBUG] GET : " + Config.SERVER_ROOT + "/vendor/htmlawed/htmlawed/htmLawedTest.php")
            # data = {'sid': 'foo', 'hhook': 'exec', 'text': 'id'}
            # headers = Config.HEADERS.update({"Content-Type":"application/x-www-form-urlencoded"})
            # cookies = {"sid": "foo"}
        r = requests.get(Config.SERVER_ROOT + "/vendor/htmlawed/htmlawed/htmLawedTest.php", verify=False, proxies=Config.PROXY, allow_redirects=False)
        if (r.status_code == 200):
            print(chalk.white('[+] GLPI is vulnerable to CVE-2022-35914', bold=True))
            # content = r.content.decode('utf-8')
            # match = re.search(r'100%;">(.*)</textarea></div><button', content)
            # if match:
            #     print(chalk.white("[+] Result :", bold=True), match.group(1))
            # else:
            #     print(chalk.white("[-] No result", bold=True))

    def verifExploit(self, module, version):
        print(chalk.white('\t[+] Looking for [', bold=True) + chalk.yellow(module, bold=True) + chalk.white('] exploits depending on version [', bold=True) + chalk.yellow(version, bold=True) + chalk.white(']', bold=True))
        for CVE in Config.CVE:
            if CVE[0] == module and self.verifVersion(version, CVE[1]):
                self.getCVE(CVE)
        if(Config.EXPLOIT or Config.ALLCHECK):
            print(chalk.green('\n[+] Performing CVE-2022-35914 check', bold=True))
            print(chalk.green('===================================\n', bold=True))
            self.CVE_2022_35914()
