from inc import Config

from packaging.version import Version, parse
import requests, chalk

class Exploits:

    def verifVersion(self, version, CVE):
        for v in CVE:
            if v[0] == "<" and parse(version) >= parse(v[1]):
                return False
            if v[0] == "<=" and parse(version) > parse(v[1]):
                return False
            if v[0] == ">" and parse(version) <= parse(v[1]):
                return False
            if v[0] == ">=" and parse(version) < parse(v[1]):
                return False
            if v[0] == "=" and parse(version) is not parse(v[1]):
                return False
        return True

    def getCVE(self, CVE):
        print(chalk.red('\n\t[+] Vulnerable to: ' + CVE[2], bold=True))
        print("\t[+] Reference: " + CVE[3])
        if CVE[4]:
            print("\t[+] CVE: " + CVE[4])

    def verifExploit(self, module, version):
        print(chalk.white('\t[+] Looking for [', bold=True) + chalk.yellow(module, bold=True) + chalk.white('] exploits depending on version [', bold=True) + chalk.yellow(version, bold=True) + chalk.white(']', bold=True))
        for CVE in Config.CVE:
            if CVE[0] == module and self.verifVersion(version, CVE[1]):
                self.getCVE(CVE)
